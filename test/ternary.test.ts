/* Copyright (c) 2021-2025 Richard Rodger and other contributors, MIT License */


import { Jsonic, util } from 'jsonic'
import { Debug } from 'jsonic/debug'

import {
  Expr,
} from '../expr'

import type {
  Op,
  Evaluate,
} from '../expr'


const { omap } = util

const C = (x: any) => JSON.parse(JSON.stringify(x))

// Walk expr tree into simplified form where first element is the op src.
const S = (x: any): any =>
  (x && Array.isArray(x)) ?
    (0 === x.length ? x : [
      x[0].src || S(x[0]),
      ...(1 < x.length ? (x.slice(1).map((t: any) => S(t))) : [])]
      .filter(t => undefined !== t)) :
    (null != x && 'object' === typeof (x) ? omap(x, ([n, v]) => [n, S(v)]) : x)

const mj =
  (je: Jsonic) => (s: string, m?: any) => C(S(je(s, m)))


const _mo_ = 'toMatchObject'




describe('expr', () => {

  beforeEach(() => {
    global.console = require('console')
  })

  test('ternary-basic', () => {
    const je = Jsonic.make()
      // .use(Debug, { trace: true })

      .use(Expr, {
        // TODO: make this work
        op: {
          factorial: {
            suffix: true,
            src: '!',
            left: 15000,
          },
          ternary: {
            ternary: true,
            src: ['?', ':'],
          }
        }
      })
    const j = mj(je)

    // expect(j('a:1'))[_mo_]({ a: 1 })


    expect(j('1?2:3'))[_mo_](['?', 1, 2, 3])

    // Ternary is right associative.
    expect(j('1?2: 3?4:5'))[_mo_](['?', 1, 2, ['?', 3, 4, 5]])
    expect(j('1?4:5 ?2:3'))[_mo_](['?', 1, 4, ['?', 5, 2, 3]])

    expect(j('1? 2?4:5 :3'))[_mo_](['?', 1, ['?', 2, 4, 5], 3])
    expect(j('1? 2? 4?6:7 :5 :3'))[_mo_](['?', 1, ['?', 2, ['?', 4, 6, 7], 5], 3])
    expect(j('1? 2? 4? 6?8:9 :7 :5 :3'))[_mo_](['?', 1, ['?', 2, ['?', 4, ['?', 6, 8, 9], 7], 5], 3])

    expect(j('1? 2?4:5 :3?6:7'))[_mo_](['?', 1, ['?', 2, 4, 5], ['?', 3, 6, 7]])
    expect(j('1? 2?4:5 :3?6: 7?8:9'))[_mo_](['?', 1, ['?', 2, 4, 5], ['?', 3, 6, ['?', 7, 8, 9]]])


    expect(j('0+1?2:3'))[_mo_](['?', ['+', 0, 1], 2, 3])

    expect(j('0+1?2: 3?4:5'))[_mo_](['?', ['+', 0, 1], 2, ['?', 3, 4, 5]])
    expect(j('0+1?4:5 ?2:3'))[_mo_](['?', ['+', 0, 1], 4, ['?', 5, 2, 3]])

    expect(j('0+1? 2?4:5 :3'))[_mo_](['?', ['+', 0, 1], ['?', 2, 4, 5], 3])
    expect(j('0+1? 2? 4?6:7 :5 :3'))[_mo_](['?', ['+', 0, 1], ['?', 2, ['?', 4, 6, 7], 5], 3])
    expect(j('0+1? 2? 4? 6?8:9 :7 :5 :3'))[_mo_](['?', ['+', 0, 1], ['?', 2, ['?', 4, ['?', 6, 8, 9], 7], 5], 3])

    expect(j('0+1? 2?4:5 :3?6:7'))[_mo_](['?', ['+', 0, 1], ['?', 2, 4, 5], ['?', 3, 6, 7]])
    expect(j('0+1? 2?4:5 :3?6: 7?8:9'))[_mo_](['?', ['+', 0, 1], ['?', 2, 4, 5], ['?', 3, 6, ['?', 7, 8, 9]]])


    expect(j('1?0+2:3'))[_mo_](['?', 1, ['+', 0, 2], 3])

    expect(j('1?0+2: 3?4:5'))[_mo_](['?', 1, ['+', 0, 2], ['?', 3, 4, 5]])
    expect(j('1?4:5 ?0+2:3'))[_mo_](['?', 1, 4, ['?', 5, ['+', 0, 2], 3]])

    expect(j('1? 0+2?4:5 :3'))[_mo_](['?', 1, ['?', ['+', 0, 2], 4, 5], 3])
    expect(j('1? 0+2? 4?6:7 :5 :3'))[_mo_](['?', 1, ['?', ['+', 0, 2], ['?', 4, 6, 7], 5], 3])
    expect(j('1? 0+2? 4? 6?8:9 :7 :5 :3'))[_mo_](['?', 1, ['?', ['+', 0, 2], ['?', 4, ['?', 6, 8, 9], 7], 5], 3])

    expect(j('1? 0+2?4:5 :3?6:7'))[_mo_](['?', 1, ['?', ['+', 0, 2], 4, 5], ['?', 3, 6, 7]])
    expect(j('1? 0+2?4:5 :3?6: 7?8:9'))[_mo_](['?', 1, ['?', ['+', 0, 2], 4, 5], ['?', 3, 6, ['?', 7, 8, 9]]])


    expect(j('1?2:0+3'))[_mo_](['?', 1, 2, ['+', 0, 3]])

    expect(j('1?2: 0+3?4:5'))[_mo_](['?', 1, 2, ['?', ['+', 0, 3], 4, 5]])
    expect(j('1?4:5 ?2:0+3'))[_mo_](['?', 1, 4, ['?', 5, 2, ['+', 0, 3]]])

    expect(j('1? 2?4:5 :0+3'))[_mo_](['?', 1, ['?', 2, 4, 5], ['+', 0, 3]])
    expect(j('1? 2? 4?6:7 :5 :0+3'))[_mo_](['?', 1, ['?', 2, ['?', 4, 6, 7], 5], ['+', 0, 3]])
    expect(j('1? 2? 4? 6?8:9 :7 :5 :0+3'))[_mo_](['?', 1, ['?', 2, ['?', 4, ['?', 6, 8, 9], 7], 5], ['+', 0, 3]])

    expect(j('1? 2?4:5 :0+3?6:7'))[_mo_](['?', 1, ['?', 2, 4, 5], ['?', ['+', 0, 3], 6, 7]])
    expect(j('1? 2?4:5 :0+3?6: 7?8:9'))[_mo_](['?', 1, ['?', 2, 4, 5], ['?', ['+', 0, 3], 6, ['?', 7, 8, 9]]])


    expect(j('0+1?0+2:3'))[_mo_](['?', ['+', 0, 1], ['+', 0, 2], 3])

    expect(j('0+1?0+2: 3?4:5'))[_mo_](['?', ['+', 0, 1], ['+', 0, 2], ['?', 3, 4, 5]])
    expect(j('0+1?4:5 ?0+2:3'))[_mo_](['?', ['+', 0, 1], 4, ['?', 5, ['+', 0, 2], 3]])

    expect(j('0+1? 0+2?4:5 :3'))[_mo_](['?', ['+', 0, 1], ['?', ['+', 0, 2], 4, 5], 3])
    expect(j('0+1? 0+2? 4?6:7 :5 :3'))[_mo_](['?', ['+', 0, 1], ['?', ['+', 0, 2], ['?', 4, 6, 7], 5], 3])
    expect(j('0+1? 0+2? 4? 6?8:9 :7 :5 :3'))[_mo_](['?', ['+', 0, 1], ['?', ['+', 0, 2], ['?', 4, ['?', 6, 8, 9], 7], 5], 3])

    expect(j('0+1? 0+2?4:5 :3?6:7'))[_mo_](['?', ['+', 0, 1], ['?', ['+', 0, 2], 4, 5], ['?', 3, 6, 7]])
    expect(j('0+1? 0+2?4:5 :3?6: 7?8:9'))[_mo_](['?', ['+', 0, 1], ['?', ['+', 0, 2], 4, 5], ['?', 3, 6, ['?', 7, 8, 9]]])


    expect(j('0+1?2:0+3'))[_mo_](['?', ['+', 0, 1], 2, ['+', 0, 3]])

    expect(j('0+1?2: 0+3?4:5'))[_mo_](['?', ['+', 0, 1], 2, ['?', ['+', 0, 3], 4, 5]])
    expect(j('0+1?4:5 ?2:0+3'))[_mo_](['?', ['+', 0, 1], 4, ['?', 5, 2, ['+', 0, 3]]])

    expect(j('0+1? 2?4:5 :0+3'))[_mo_](['?', ['+', 0, 1], ['?', 2, 4, 5], ['+', 0, 3]])
    expect(j('0+1? 2? 4?6:7 :5 :0+3'))[_mo_](['?', ['+', 0, 1], ['?', 2, ['?', 4, 6, 7], 5], ['+', 0, 3]])
    expect(j('0+1? 2? 4? 6?8:9 :7 :5 :0+3'))[_mo_](['?', ['+', 0, 1], ['?', 2, ['?', 4, ['?', 6, 8, 9], 7], 5], ['+', 0, 3]])

    expect(j('0+1? 2?4:5 :0+3?6:7'))[_mo_](['?', ['+', 0, 1], ['?', 2, 4, 5], ['?', ['+', 0, 3], 6, 7]])
    expect(j('0+1? 2?4:5 :0+3?6: 7?8:9'))[_mo_](['?', ['+', 0, 1], ['?', 2, 4, 5], ['?', ['+', 0, 3], 6, ['?', 7, 8, 9]]])


    expect(j('0+1?0+2:0+3'))[_mo_](['?', ['+', 0, 1], ['+', 0, 2], ['+', 0, 3]])

    expect(j('0+1?0+2: 0+3?4:5'))[_mo_](['?', ['+', 0, 1], ['+', 0, 2], ['?', ['+', 0, 3], 4, 5]])
    expect(j('0+1?4:5 ?0+2:0+3'))[_mo_](['?', ['+', 0, 1], 4, ['?', 5, ['+', 0, 2], ['+', 0, 3]]])

    expect(j('0+1? 0+2?4:5 :0+3'))[_mo_](['?', ['+', 0, 1], ['?', ['+', 0, 2], 4, 5], ['+', 0, 3]])
    expect(j('0+1? 0+2? 4?6:7 :5 :0+3'))[_mo_](['?', ['+', 0, 1], ['?', ['+', 0, 2], ['?', 4, 6, 7], 5], ['+', 0, 3]])
    expect(j('0+1? 0+2? 4? 6?8:9 :7 :5 :0+3'))[_mo_](['?', ['+', 0, 1], ['?', ['+', 0, 2], ['?', 4, ['?', 6, 8, 9], 7], 5], ['+', 0, 3]])

    expect(j('0+1? 0+2?4:5 :0+3?6:7'))[_mo_](['?', ['+', 0, 1], ['?', ['+', 0, 2], 4, 5], ['?', ['+', 0, 3], 6, 7]])
    expect(j('0+1? 0+2?4:5 :0+3?6: 7?8:9'))[_mo_](['?', ['+', 0, 1], ['?', ['+', 0, 2], 4, 5], ['?', ['+', 0, 3], 6, ['?', 7, 8, 9]]])


    expect(j('-1?2:3'))[_mo_](['?', ['-', 1], 2, 3])

    expect(j('-1?2: 3?4:5'))[_mo_](['?', ['-', 1], 2, ['?', 3, 4, 5]])
    expect(j('-1?4:5 ?2:3'))[_mo_](['?', ['-', 1], 4, ['?', 5, 2, 3]])

    expect(j('-1? 2?4:5 :3'))[_mo_](['?', ['-', 1], ['?', 2, 4, 5], 3])
    expect(j('-1? 2? 4?6:7 :5 :3'))[_mo_](['?', ['-', 1], ['?', 2, ['?', 4, 6, 7], 5], 3])
    expect(j('-1? 2? 4? 6?8:9 :7 :5 :3'))[_mo_](['?', ['-', 1], ['?', 2, ['?', 4, ['?', 6, 8, 9], 7], 5], 3])

    expect(j('-1? 2?4:5 :3?6:7'))[_mo_](['?', ['-', 1], ['?', 2, 4, 5], ['?', 3, 6, 7]])
    expect(j('-1? 2?4:5 :3?6: 7?8:9'))[_mo_](['?', ['-', 1], ['?', 2, 4, 5], ['?', 3, 6, ['?', 7, 8, 9]]])


    expect(j('1!?2:3'))[_mo_](['?', ['!', 1], 2, 3])

    expect(j('1!?2: 3?4:5'))[_mo_](['?', ['!', 1], 2, ['?', 3, 4, 5]])
    expect(j('1!?4:5 ?2:3'))[_mo_](['?', ['!', 1], 4, ['?', 5, 2, 3]])

    expect(j('1!? 2?4:5 :3'))[_mo_](['?', ['!', 1], ['?', 2, 4, 5], 3])
    expect(j('1!? 2? 4?6:7 :5 :3'))[_mo_](['?', ['!', 1], ['?', 2, ['?', 4, 6, 7], 5], 3])
    expect(j('1!? 2? 4? 6?8:9 :7 :5 :3'))[_mo_](['?', ['!', 1], ['?', 2, ['?', 4, ['?', 6, 8, 9], 7], 5], 3])

    expect(j('1!? 2?4:5 :3?6:7'))[_mo_](['?', ['!', 1], ['?', 2, 4, 5], ['?', 3, 6, 7]])
    expect(j('1!? 2?4:5 :3?6: 7?8:9'))[_mo_](['?', ['!', 1], ['?', 2, 4, 5], ['?', 3, 6, ['?', 7, 8, 9]]])


    expect(j('-1!?2:3'))[_mo_](['?', ['-', ['!', 1]], 2, 3])

    expect(j('-1!?2: 3?4:5'))[_mo_](['?', ['-', ['!', 1]], 2, ['?', 3, 4, 5]])
    expect(j('-1!?4:5 ?2:3'))[_mo_](['?', ['-', ['!', 1]], 4, ['?', 5, 2, 3]])

    expect(j('-1!? 2?4:5 :3'))[_mo_](['?', ['-', ['!', 1]], ['?', 2, 4, 5], 3])
    expect(j('-1!? 2? 4?6:7 :5 :3'))[_mo_](['?', ['-', ['!', 1]], ['?', 2, ['?', 4, 6, 7], 5], 3])
    expect(j('-1!? 2? 4? 6?8:9 :7 :5 :3'))[_mo_](['?', ['-', ['!', 1]], ['?', 2, ['?', 4, ['?', 6, 8, 9], 7], 5], 3])

    expect(j('-1!? 2?4:5 :3?6:7'))[_mo_](['?', ['-', ['!', 1]], ['?', 2, 4, 5], ['?', 3, 6, 7]])
    expect(j('-1!? 2?4:5 :3?6: 7?8:9'))[_mo_](['?', ['-', ['!', 1]], ['?', 2, 4, 5], ['?', 3, 6, ['?', 7, 8, 9]]])


    expect(j('1?-2:3'))[_mo_](['?', 1, ['-', 2], 3])

    expect(j('1?-2: 3?4:5'))[_mo_](['?', 1, ['-', 2], ['?', 3, 4, 5]])
    expect(j('1?4:5 ?-2:3'))[_mo_](['?', 1, 4, ['?', 5, ['-', 2], 3]])

    expect(j('1? -2?4:5 :3'))[_mo_](['?', 1, ['?', ['-', 2], 4, 5], 3])
    expect(j('1? -2? 4?6:7 :5 :3'))[_mo_](['?', 1, ['?', ['-', 2], ['?', 4, 6, 7], 5], 3])
    expect(j('1? -2? 4? 6?8:9 :7 :5 :3'))[_mo_](['?', 1, ['?', ['-', 2], ['?', 4, ['?', 6, 8, 9], 7], 5], 3])

    expect(j('1? -2?4:5 :3?6:7'))[_mo_](['?', 1, ['?', ['-', 2], 4, 5], ['?', 3, 6, 7]])
    expect(j('1? -2?4:5 :3?6: 7?8:9'))[_mo_](['?', 1, ['?', ['-', 2], 4, 5], ['?', 3, 6, ['?', 7, 8, 9]]])


    expect(j('1?2!:3'))[_mo_](['?', 1, ['!', 2], 3])

    expect(j('1?2!: 3?4:5'))[_mo_](['?', 1, ['!', 2], ['?', 3, 4, 5]])
    expect(j('1?4:5 ?2!:3'))[_mo_](['?', 1, 4, ['?', 5, ['!', 2], 3]])

    expect(j('1? 2!?4:5 :3'))[_mo_](['?', 1, ['?', ['!', 2], 4, 5], 3])
    expect(j('1? 2!? 4?6:7 :5 :3'))[_mo_](['?', 1, ['?', ['!', 2], ['?', 4, 6, 7], 5], 3])
    expect(j('1? 2!? 4? 6?8:9 :7 :5 :3'))[_mo_](['?', 1, ['?', ['!', 2], ['?', 4, ['?', 6, 8, 9], 7], 5], 3])

    expect(j('1? 2!?4:5 :3?6:7'))[_mo_](['?', 1, ['?', ['!', 2], 4, 5], ['?', 3, 6, 7]])
    expect(j('1? 2!?4:5 :3?6: 7?8:9'))[_mo_](['?', 1, ['?', ['!', 2], 4, 5], ['?', 3, 6, ['?', 7, 8, 9]]])


    expect(j('1?-2!:3'))[_mo_](['?', 1, ['-', ['!', 2]], 3])

    expect(j('1?-2!: 3?4:5'))[_mo_](['?', 1, ['-', ['!', 2]], ['?', 3, 4, 5]])
    expect(j('1?4:5 ?-2!:3'))[_mo_](['?', 1, 4, ['?', 5, ['-', ['!', 2]], 3]])

    expect(j('1? -2!?4:5 :3'))[_mo_](['?', 1, ['?', ['-', ['!', 2]], 4, 5], 3])
    expect(j('1? -2!? 4?6:7 :5 :3'))[_mo_](['?', 1, ['?', ['-', ['!', 2]], ['?', 4, 6, 7], 5], 3])
    expect(j('1? -2!? 4? 6?8:9 :7 :5 :3'))[_mo_](['?', 1, ['?', ['-', ['!', 2]], ['?', 4, ['?', 6, 8, 9], 7], 5], 3])

    expect(j('1? -2!?4:5 :3?6:7'))[_mo_](['?', 1, ['?', ['-', ['!', 2]], 4, 5], ['?', 3, 6, 7]])
    expect(j('1? -2!?4:5 :3?6: 7?8:9'))[_mo_](['?', 1, ['?', ['-', ['!', 2]], 4, 5], ['?', 3, 6, ['?', 7, 8, 9]]])


    expect(j('1?2:-3'))[_mo_](['?', 1, 2, ['-', 3]])

    expect(j('1?2: -3?4:5'))[_mo_](['?', 1, 2, ['?', ['-', 3], 4, 5]])
    expect(j('1?4:5 ?2:-3'))[_mo_](['?', 1, 4, ['?', 5, 2, ['-', 3]]])

    expect(j('1? 2?4:5 :-3'))[_mo_](['?', 1, ['?', 2, 4, 5], ['-', 3]])
    expect(j('1? 2? 4?6:7 :5 :-3'))[_mo_](['?', 1, ['?', 2, ['?', 4, 6, 7], 5], ['-', 3]])
    expect(j('1? 2? 4? 6?8:9 :7 :5 :-3'))[_mo_](['?', 1, ['?', 2, ['?', 4, ['?', 6, 8, 9], 7], 5], ['-', 3]])

    expect(j('1? 2?4:5 :-3?6:7'))[_mo_](['?', 1, ['?', 2, 4, 5], ['?', ['-', 3], 6, 7]])
    expect(j('1? 2?4:5 :-3?6: 7?8:9'))[_mo_](['?', 1, ['?', 2, 4, 5], ['?', ['-', 3], 6, ['?', 7, 8, 9]]])


    expect(j('1?2:3!'))[_mo_](['?', 1, 2, ['!', 3]])

    expect(j('1?2: 3!?4:5'))[_mo_](['?', 1, 2, ['?', ['!', 3], 4, 5]])
    expect(j('1?4:5 ?2:3!'))[_mo_](['?', 1, 4, ['?', 5, 2, ['!', 3]]])

    expect(j('1? 2?4:5 :3!'))[_mo_](['?', 1, ['?', 2, 4, 5], ['!', 3]])
    expect(j('1? 2? 4?6:7 :5 :3!'))[_mo_](['?', 1, ['?', 2, ['?', 4, 6, 7], 5], ['!', 3]])
    expect(j('1? 2? 4? 6?8:9 :7 :5 :3!'))[_mo_](['?', 1, ['?', 2, ['?', 4, ['?', 6, 8, 9], 7], 5], ['!', 3]])

    expect(j('1? 2?4:5 :3!?6:7'))[_mo_](['?', 1, ['?', 2, 4, 5], ['?', ['!', 3], 6, 7]])
    expect(j('1? 2?4:5 :3!?6: 7?8:9'))[_mo_](['?', 1, ['?', 2, 4, 5], ['?', ['!', 3], 6, ['?', 7, 8, 9]]])


    expect(j('1?2:-3!'))[_mo_](['?', 1, 2, ['-', ['!', 3]]])

    expect(j('1?2: -3!?4:5'))[_mo_](['?', 1, 2, ['?', ['-', ['!', 3]], 4, 5]])
    expect(j('1?4:5 ?2:-3!'))[_mo_](['?', 1, 4, ['?', 5, 2, ['-', ['!', 3]]]])

    expect(j('1? 2?4:5 :-3!'))[_mo_](['?', 1, ['?', 2, 4, 5], ['-', ['!', 3]]])
    expect(j('1? 2? 4?6:7 :5 :-3!'))[_mo_](['?', 1, ['?', 2, ['?', 4, 6, 7], 5], ['-', ['!', 3]]])
    expect(j('1? 2? 4? 6?8:9 :7 :5 :-3!'))[_mo_](['?', 1, ['?', 2, ['?', 4, ['?', 6, 8, 9], 7], 5], ['-', ['!', 3]]])

    expect(j('1? 2?4:5 :-3!?6:7'))[_mo_](['?', 1, ['?', 2, 4, 5], ['?', ['-', ['!', 3]], 6, 7]])
    expect(j('1? 2?4:5 :-3!?6: 7?8:9'))[_mo_](['?', 1, ['?', 2, 4, 5], ['?', ['-', ['!', 3]], 6, ['?', 7, 8, 9]]])

    expect(j('a 1?2:3'))[_mo_](['a', ['?', 1, 2, 3]])
    expect(j('1?2:3 b'))[_mo_]([['?', 1, 2, 3], 'b'])
    expect(j('a 1?2:3 b'))[_mo_](['a', ['?', 1, 2, 3], 'b'])

    expect(j('a,1?2:3'))[_mo_](['a', ['?', 1, 2, 3]])
    expect(j('1?2:3,b'))[_mo_]([['?', 1, 2, 3], 'b'])
    expect(j('a,1?2:3,b'))[_mo_](['a', ['?', 1, 2, 3], 'b'])

    expect(j('(a 1?2:3)'))[_mo_](['(', ['a', ['?', 1, 2, 3]]])
    expect(j('(1?2:3 b)'))[_mo_](['(', [['?', 1, 2, 3], 'b']])
    expect(j('(a 1?2:3 b)'))[_mo_](['(', ['a', ['?', 1, 2, 3], 'b']])

    expect(j('(a,1?2:3)'))[_mo_](['(', ['a', ['?', 1, 2, 3]]])
    expect(j('(1?2:3,b)'))[_mo_](['(', [['?', 1, 2, 3], 'b']])
    expect(j('(a,1?2:3,b)'))[_mo_](['(', ['a', ['?', 1, 2, 3], 'b']])
  })


  test('ternary-paren-preval', () => {
    const je = Jsonic.make().use(Expr, {
      // TODO: make this work
      op: {
        ternary: {
          ternary: true,
          src: ['?', ':'],
        },
        // },

        // paren: {
        plain: {
          preval: {}
        }
      }
    })
    const j = mj(je)

    expect(j('a:1'))[_mo_]({ a: 1 })

    expect(j('1?2:3'))[_mo_](['?', 1, 2, 3])

    expect(j('a 1?2:3'))[_mo_](['a', ['?', 1, 2, 3]])
    expect(j('1?2:3 b'))[_mo_]([['?', 1, 2, 3], 'b'])
    expect(j('a 1?2:3 b'))[_mo_](['a', ['?', 1, 2, 3], 'b'])

    expect(j('a,1?2:3'))[_mo_](['a', ['?', 1, 2, 3]])
    expect(j('1?2:3,b'))[_mo_]([['?', 1, 2, 3], 'b'])
    expect(j('a,1?2:3,b'))[_mo_](['a', ['?', 1, 2, 3], 'b'])

    expect(j('(a 1?2:3)'))[_mo_](['(', ['a', ['?', 1, 2, 3]]])
    expect(j('(1?2:3 b)'))[_mo_](['(', [['?', 1, 2, 3], 'b']])
    expect(j('(a 1?2:3 b)'))[_mo_](['(', ['a', ['?', 1, 2, 3], 'b']])

    expect(j('(a,1?2:3)'))[_mo_](['(', ['a', ['?', 1, 2, 3]]])
    expect(j('(1?2:3,b)'))[_mo_](['(', [['?', 1, 2, 3], 'b']])
    expect(j('(a,1?2:3,b)'))[_mo_](['(', ['a', ['?', 1, 2, 3], 'b']])

    expect(j('foo(a 1?2:3)'))[_mo_](['(', 'foo', ['a', ['?', 1, 2, 3]]])
    expect(j('foo(1?2:3 b)'))[_mo_](['(', 'foo', [['?', 1, 2, 3], 'b']])
    expect(j('foo(a 1?2:3 b)'))[_mo_](['(', 'foo', ['a', ['?', 1, 2, 3], 'b']])

    expect(j('foo(a,1?2:3)'))[_mo_](['(', 'foo', ['a', ['?', 1, 2, 3]]])
    expect(j('foo(1?2:3,b)'))[_mo_](['(', 'foo', [['?', 1, 2, 3], 'b']])
    expect(j('foo(a,1?2:3,b)'))[_mo_](['(', 'foo', ['a', ['?', 1, 2, 3], 'b']])


  })


  test('ternary-many', () => {
    const je0 = Jsonic.make().use(Expr, {
      // TODO: make this work
      op: {
        foo: {
          ternary: true,
          src: ['?', ':'],
        },
        bar: {
          ternary: true,
          src: ['QQ', 'CC'],
        },
      }
    })
    const j0 = mj(je0)

    expect(j0('a:1'))[_mo_]({ a: 1 })

    expect(j0('1?2:3'))[_mo_](['?', 1, 2, 3])
    expect(j0('1QQ2CC3'))[_mo_](['QQ', 1, 2, 3])

    expect(j0('1QQ2?4:5CC3'))[_mo_](['QQ', 1, ['?', 2, 4, 5], 3])
    expect(j0('1?2QQ4CC5:3'))[_mo_](['?', 1, ['QQ', 2, 4, 5], 3])

    const je1 = Jsonic.make().use(Expr, {
      // TODO: make this work
      op: {
        foo: {
          ternary: true,
          src: ['?', ':'],
        },
        bar: {
          ternary: true,
          src: ['QQ', 'CC'],
        },
        zed: {
          ternary: true,
          src: ['%%', '@@'],
        },
      }
    })
    const j1 = mj(je1)

    expect(j1('a:1'))[_mo_]({ a: 1 })

    expect(j1('1?2:3'))[_mo_](['?', 1, 2, 3])
    expect(j1('1QQ2CC3'))[_mo_](['QQ', 1, 2, 3])
    expect(j1('1%%2@@3'))[_mo_](['%%', 1, 2, 3])

    expect(j1('1QQ2?4:5CC3'))[_mo_](['QQ', 1, ['?', 2, 4, 5], 3])
    expect(j1('1?2QQ4CC5:3'))[_mo_](['?', 1, ['QQ', 2, 4, 5], 3])

    expect(j1('1QQ2%%4@@5CC3'))[_mo_](['QQ', 1, ['%%', 2, 4, 5], 3])
    expect(j1('1?2%%4@@5:3'))[_mo_](['?', 1, ['%%', 2, 4, 5], 3])

    expect(j1('1%%2?4:5@@3'))[_mo_](['%%', 1, ['?', 2, 4, 5], 3])
    expect(j1('1%%2QQ4CC5@@3'))[_mo_](['%%', 1, ['QQ', 2, 4, 5], 3])
  })



})


